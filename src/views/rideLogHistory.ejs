<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .dashboard-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }
        .stat-card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
        }
        .stat-card:hover {
            transform: translateY(-2px);
        }
        .stat-icon {
            font-size: 2.5rem;
            opacity: 0.8;
        }
        #map {
            height: 500px;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .search-form {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }
        .location-table {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
        .timeline-item {
            border-left: 3px solid #007bff;
            padding-left: 1rem;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
        }
        .status-badge {
            font-size: 0.8rem;
        }
        .custom-date-range {
            display: none;
        }
        .error-alert {
            display: none;
        }
    </style>
</head>
<body>
<!-- Header -->
<div class="dashboard-header">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1><i class="fas fa-route me-3"></i><%= title %></h1>
                <p class="mb-0">Track and analyze driver location history in real-time</p>
            </div>
            <div class="col-md-6 text-end">
                <div class="d-flex justify-content-end align-items-center">
                    <i class="fas fa-clock me-2"></i>
                    <span id="currentTime"></span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- Search Form -->
    <div class="search-form">
        <h3 class="mb-4"><i class="fas fa-search me-2"></i>Search Driver Location History</h3>
        <form id="searchForm">
            <div class="row">
                <div class="col-md-2">
                    <label class="form-label">Driver ID</label>
                    <input type="text" class="form-control" id="driverId" placeholder="Enter driver ID"
                           value="48a18460-0dd3-11ef-ab1d-81f61a430ce0">
                </div>
                <div class="col-md-2">
                    <label class="form-label">Ride Status</label>
                    <select class="form-select" id="rideStatus">
                        <option value="">All Status</option>
                        <option value="on_ride">On Ride</option>
                        <option value="available">Available</option>
                        <option value="on_break">On Break</option>
                    </select>
                    <div class="status-filter-info">
                        <small>Filter by driver's current status</small>
                    </div>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Time Range</label>
                    <select class="form-select" id="timeRange">
                        <option value="last1h">Last 1 Hour</option>
                        <option value="last24h">Last 24 Hours</option>
                        <option value="last7d">Last 7 Days</option>
                        <option value="last30d">Last 30 Days</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Record Limit</label>
                    <select class="form-select" id="recordLimit">
                        <option value="100">100</option>
                        <option value="500" selected>500</option>
                        <option value="1000">1000</option>
                        <option value="2000">2000</option>
                        <option value="5000">5000</option>
                        <option value="10000">10000</option>
                    </select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-search me-2"></i>Search
                    </button>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-outline-secondary w-100" id="clearBtn">
                        <i class="fas fa-times me-2"></i>Clear
                    </button>
                </div>
            </div>

            <!-- Custom Date Range -->
            <div class="row mt-3 custom-date-range" id="customDateRange">
                <div class="col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="datetime-local" class="form-control" id="customStart">
                </div>
                <div class="col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="datetime-local" class="form-control" id="customEnd">
                </div>
            </div>
        </form>
    </div>
    <!-- Status Filter Legend -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-body py-2">
                    <small class="text-muted">
                        <strong>Status Definitions:</strong>
                        <span class="badge bg-success me-2">On Ride</span> Driver has booked seats or is out for delivery
                        <span class="badge bg-primary me-2">Available</span> Driver is online with no booked seats
                        <span class="badge bg-secondary me-2">On Break</span> Driver is offline
                    </small>
                </div>
            </div>
        </div>
    </div>
    <!-- Error Alert -->
    <div class="alert alert-danger error-alert" id="errorAlert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <span id="errorMessage"></span>
    </div>

    <!-- Loading -->
    <div class="loading" id="loading">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Fetching location data...</p>
    </div>

    <!-- Results Section -->
    <div id="resultsSection" style="display: none;">
        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <div class="card stat-card text-center h-100">
                    <div class="card-body">
                        <i class="fas fa-database stat-icon text-primary"></i>
                        <h3 class="mt-3 mb-1" id="totalRecords">0</h3>
                        <p class="text-muted mb-0">Total Records</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card stat-card text-center h-100">
                    <div class="card-body">
                        <i class="fas fa-download stat-icon text-success"></i>
                        <h3 class="mt-3 mb-1" id="recordsReturned">0</h3>
                        <p class="text-muted mb-0">Records Returned</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card stat-card text-center h-100">
                    <div class="card-body">
                        <i class="fas fa-route stat-icon text-warning"></i>
                        <h3 class="mt-3 mb-1" id="totalDistance">0 km</h3>
                        <p class="text-muted mb-0">Distance Traveled</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card stat-card text-center h-100">
                    <div class="card-body">
                        <i class="fas fa-clock stat-icon text-info"></i>
                        <h3 class="mt-3 mb-1" id="queryTime">0ms</h3>
                        <p class="text-muted mb-0">Query Time</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Map and Timeline -->
        <div class="row">
            <div class="col-md-8 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-map-marked-alt me-2"></i>Location Map</h5>
                    </div>
                    <div class="card-body p-0">
                        <div id="map"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-timeline me-2"></i>Recent Activity</h5>
                    </div>
                    <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                        <div id="timeline"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Location Data Table -->
        <div class="location-table">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-table me-2"></i>Location History Details</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-dark">
                            <tr>
                                <th>Timestamp</th>
                                <th>Ride ID</th>
                                <th>Location</th>
                                <th>Status</th>
                                <th>Booked Seats</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody id="locationTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
    let map;
    let markers = [];
    let polyline;

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
        updateTime();
        setInterval(updateTime, 1000);
        initializeMap();
        setupEventListeners();
    });

    function updateTime() {
        const now = new Date();
        document.getElementById('currentTime').textContent = now.toLocaleString();
    }

    function initializeMap() {
        map = L.map('map').setView([28.6139, 77.2090], 10); // Default to Delhi
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);
    }

    function setupEventListeners() {
        // Time range change
        document.getElementById('timeRange').addEventListener('change', function() {
            const customRange = document.getElementById('customDateRange');
            if (this.value === 'custom') {
                customRange.style.display = 'block';
            } else {
                customRange.style.display = 'none';
            }
        });

        // Form submission
        document.getElementById('searchForm').addEventListener('submit', handleSearch);
        document.getElementById('clearBtn').addEventListener('click', clearResults);
    }

    async function handleSearch(e) {
        e.preventDefault();

        const formData = {
            driverId: document.getElementById('driverId').value.trim(),
            rideStatus: document.getElementById('rideStatus').value,
            timeRange: document.getElementById('timeRange').value,
            customStart: document.getElementById('customStart').value,
            customEnd: document.getElementById('customEnd').value,
            recordLimit: document.getElementById('recordLimit').value
        };


        if (formData.timeRange === 'custom' && (!formData.customStart || !formData.customEnd)) {
            showError('Please select both start and end dates for custom range');
            return;
        }

        showLoading(true);
        hideError();

        try {
            const response = await fetch('/api/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to fetch data');
            }

            displayResults(data);
        } catch (error) {
            showError(error.message);
        } finally {
            showLoading(false);
        }
    }

    function displayResults(data) {
        // Update statistics
        document.getElementById('totalRecords').textContent = data.totalRecords.toLocaleString();
        document.getElementById('recordsReturned').textContent = data.recordsReturned.toLocaleString();
        document.getElementById('totalDistance').textContent =
            data.totalDistanceKm ? `${data.totalDistanceKm.toFixed(2)} km` : 'N/A';
        document.getElementById('queryTime').textContent = `${data.query.took}ms`;

        // Update map
        updateMap(data.locations);

        // Update timeline
        updateTimeline(data.locations.slice(0, 10)); // Show recent 10

        // Update table
        updateTable(data.locations);

        // Show results section
        document.getElementById('resultsSection').style.display = 'block';
    }

    function updateMap(locations) {
        // Clear existing markers and polyline
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
        if (polyline) map.removeLayer(polyline);

        if (locations.length === 0) return;

        const points = [];

        locations.forEach((location, index) => {
            if (location.currentLocation && location.currentLocation.lat && location.currentLocation.lng) {
                const lat = location.currentLocation.lat;
                const lng = location.currentLocation.lng;
                points.push([lat, lng]);

                // Create marker
                const marker = L.marker([lat, lng])
                    .bindPopup(`
                            <strong>Ride:</strong> ${location.rideId || 'N/A'}<br>
                            <strong>Time:</strong> ${new Date(location.createdAt._seconds * 1000).toLocaleString()}<br>
                            <strong>Online:</strong> ${location.online ? 'Yes' : 'No'}<br>
                            <strong>Seats:</strong> ${location.bookedSeats || 0}
                        `);

                marker.addTo(map);
                markers.push(marker);
            }
        });

        // Create route polyline
        if (points.length > 1) {
            polyline = L.polyline(points, {color: 'blue', weight: 3, opacity: 0.7}).addTo(map);
            map.fitBounds(polyline.getBounds());
        } else if (points.length === 1) {
            map.setView(points[0], 15);
        }
    }

    function updateTimeline(locations) {
        const timeline = document.getElementById('timeline');
        timeline.innerHTML = '';

        locations.forEach(location => {
            const item = document.createElement('div');
            item.className = 'timeline-item';

            const time = new Date(location.createdAt._seconds * 1000);
            const statusColor = location.online ? (location.bookedSeats > 0 ? 'success' : 'primary') : 'secondary';

            item.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <small class="text-muted">${time.toLocaleString()}</small>
                            <p class="mb-1"><strong>Ride:</strong> ${location.rideId || 'N/A'}</p>
                        </div>
                        <span class="badge bg-${statusColor} status-badge">
                            ${location.online && location.bookedSeats > 0 ? 'On Ride' : location.online && location.bookedSeats === 0 ? 'Available' : 'On Break'}
                        </span>
                    </div>
                    <p class="mb-0"><small>Seats: ${location.bookedSeats || 0}</small></p>
                `;

            timeline.appendChild(item);
        });
    }

    function updateTable(locations) {
        const tbody = document.getElementById('locationTableBody');
        tbody.innerHTML = '';

        locations.forEach(location => {
            const row = document.createElement('tr');
            const time = new Date(location.createdAt._seconds * 1000);
            const lat = location.currentLocation?.lat?.toFixed(6) || 'N/A';
            const lng = location.currentLocation?.lng?.toFixed(6) || 'N/A';

            const statusBadges = [];
            if (location.online && location.bookedSeats > 0) statusBadges.push('<span class="badge bg-success me-1">On Ride</span>');
            if (location.online && location.bookedSeats === 0) statusBadges.push('<span class="badge bg-primary me-1">Available</span>');
            if (!location.online) statusBadges.push('<span class="badge bg-secondary me-1">On Break</span>');
            if (location.outForDelivery) statusBadges.push('<span class="badge bg-warning me-1">Delivery</span>');
            if (location.checkedIn) statusBadges.push('<span class="badge bg-info me-1">Offline</span>');


            row.innerHTML = `
                    <td>${time.toLocaleString()}</td>
                    <td>${location.rideId || 'N/A'}</td>
                    <td>${lat}, ${lng}</td>
                    <td>${statusBadges.join('') || '<span class="badge bg-secondary">Offline</span>'}</td>
                    <td>${location.bookedSeats || 0}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="showLocationOnMap(${lat}, ${lng})">
                            <i class="fas fa-map-marker-alt"></i>
                        </button>
                    </td>
                `;

            tbody.appendChild(row);
        });
    }

    function showLocationOnMap(lat, lng) {
        if (lat !== 'N/A' && lng !== 'N/A') {
            map.setView([lat, lng], 16);
            // Find and open the marker popup
            markers.forEach(marker => {
                const markerPos = marker.getLatLng();
                if (Math.abs(markerPos.lat - lat) < 0.0001 && Math.abs(markerPos.lng - lng) < 0.0001) {
                    marker.openPopup();
                }
            });
        }
    }

    function clearResults() {
        document.getElementById('resultsSection').style.display = 'none';
        document.getElementById('driverId').value = '';
        document.getElementById('timeRange').value = 'last24h';
        document.getElementById('customDateRange').style.display = 'none';
        hideError();

        // Clear map
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
        if (polyline) map.removeLayer(polyline);
        map.setView([28.6139, 77.2090], 10);
    }

    function showLoading(show) {
        document.getElementById('loading').style.display = show ? 'block' : 'none';
    }

    function showError(message) {
        document.getElementById('errorMessage').textContent = message;
        document.getElementById('errorAlert').style.display = 'block';
    }

    function hideError() {
        document.getElementById('errorAlert').style.display = 'none';
    }
</script>
</body>
</html>