<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Polyline Management Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.3rem;
            font-weight: 600;
        }

        .metric-card {
            text-align: center;
            border-left: 4px solid;
        }

        .metric-card.healthy { border-left-color: #27ae60; }
        .metric-card.warning { border-left-color: #f39c12; }
        .metric-card.critical { border-left-color: #e74c3c; }

        .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .metric-label {
            font-size: 0.9rem;
            color: #7f8c8d;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .form-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 8px;
            font-weight: 500;
            color: #2c3e50;
        }

        .form-group input,
        .form-group select {
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .results-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        .loading::after {
            content: '';
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 20px;
        }

        .table-responsive {
            overflow-x: auto;
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-valid { background: #d4edda; color: #155724; }
        .status-invalid { background: #f8d7da; color: #721c24; }
        .status-missing { background: #fff3cd; color: #856404; }
        .status-partial { background: #cce7ff; color: #004085; }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #dc3545;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #28a745;
        }

        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }

        .tab {
            padding: 15px 25px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .tab.active {
            border-bottom-color: #667eea;
            color: #667eea;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .route-details {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 10px;
            margin: 5px 0;
            font-size: 0.9rem;
        }

        .route-summary {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 5px;
        }

        .route-tag {
            background: #e9ecef;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            color: #495057;
        }

        .polyline-info {
            font-family: monospace;
            font-size: 0.8rem;
            color: #6c757d;
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .validation-details {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
        }

        .validation-route {
            border-left: 3px solid #dee2e6;
            padding-left: 10px;
            margin: 10px 0;
        }

        .validation-route.valid {
            border-left-color: #28a745;
        }

        .validation-route.invalid {
            border-left-color: #dc3545;
        }

        .validation-route.missing {
            border-left-color: #ffc107;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .dashboard-grid {
                grid-template-columns: 1fr;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>üó∫Ô∏è Polyline Management Dashboard</h1>
        <p>Monitor and manage polyline data coverage across your trip database (Array Structure Support)</p>
    </div>

    <!-- Quick Status Cards -->
    <div class="dashboard-grid" id="statusCards">
        <div class="card metric-card" id="coverageCard">
            <div class="metric-value" id="coverageValue">--</div>
            <div class="metric-label">Coverage Percentage</div>
        </div>
        <div class="card metric-card">
            <div class="metric-value" id="totalTripsValue">--</div>
            <div class="metric-label">Total Trips (24h)</div>
        </div>
        <div class="card metric-card">
            <div class="metric-value" id="withPolylineValue">--</div>
            <div class="metric-label">With Polylines</div>
        </div>
        <div class="card metric-card">
            <div class="metric-value" id="withoutPolylineValue">--</div>
            <div class="metric-label">Missing Polylines</div>
        </div>
    </div>

    <!-- Tabs -->
    <div class="tabs">
        <div class="tab active" onclick="switchTab('statistics')">üìä Statistics</div>
        <div class="tab" onclick="switchTab('search')">üîç Search & Filter</div>
        <div class="tab" onclick="switchTab('validate')">‚úÖ Validate</div>
        <div class="tab" onclick="switchTab('missing')">‚ùå Missing Polylines</div>
    </div>

    <!-- Statistics Tab -->
    <div id="statistics-tab" class="tab-content active">
        <div class="form-section">
            <h3>üìà Polyline Statistics</h3>
            <div class="form-grid">
                <div class="form-group">
                    <label for="statsTimeRange">Time Range</label>
                    <select id="statsTimeRange">
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="last7d">Last 7 Days</option>
                        <option value="last30d" selected>Last 30 Days</option>
                        <option value="last90d">Last 90 Days</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="form-group" id="customStatsRange" style="display: none;">
                    <label for="statsCustomStart">Start Date</label>
                    <input type="datetime-local" id="statsCustomStart">
                </div>
                <div class="form-group" id="customStatsEndRange" style="display: none;">
                    <label for="statsCustomEnd">End Date</label>
                    <input type="datetime-local" id="statsCustomEnd">
                </div>
            </div>
            <button class="btn btn-primary" onclick="loadStatistics()">üìä Generate Statistics</button>
        </div>

        <div class="results-section" id="statisticsResults" style="display: none;">
            <h3>üìä Coverage Statistics</h3>
            <div class="dashboard-grid" id="detailedStats"></div>
            <div class="chart-container">
                <canvas id="coverageChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Search & Filter Tab -->
    <div id="search-tab" class="tab-content">
        <div class="form-section">
            <h3>üîç Search Trips with Polyline Filter</h3>
            <div class="form-grid">
                <div class="form-group">
                    <label for="polylineFilter">Polyline Filter</label>
                    <select id="polylineFilter">
                        <option value="true">Only with Polylines</option>
                        <option value="false">Only without Polylines</option>
                        <option value="null">All Trips</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="searchTimeRange">Time Range</label>
                    <select id="searchTimeRange">
                        <option value="today" selected>Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="last7d">Last 7 Days</option>
                        <option value="last30d">Last 30 Days</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="tripStatus">Trip Status</label>
                    <select id="tripStatus">
                        <option value="">All Statuses</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="ongoing">Ongoing</option>
                        <option value="scheduled">Scheduled</option>
                        <option value="assigned">Assigned</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="rideType">Ride Type</label>
                    <select id="rideType">
                        <option value="">All Types</option>
                        <option value="shared">Shared</option>
                        <option value="private">Private</option>
                        <option value="delivery">Delivery</option>
                        <option value="scheduled">Scheduled</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="recordLimit">Record Limit</label>
                    <input type="number" id="recordLimit" value="100" min="1" max="1000">
                </div>
                <div class="form-group">
                    <label for="validatePolyline">Validate Polylines</label>
                    <select id="validatePolyline">
                        <option value="false">No</option>
                        <option value="true">Yes</option>
                    </select>
                </div>
            </div>
            <button class="btn btn-primary" onclick="searchTrips()">üîç Search Trips</button>
            <button class="btn btn-secondary" onclick="exportResults()">üì• Export Results</button>
        </div>

        <div class="results-section" id="searchResults" style="display: none;">
            <h3>üîç Search Results</h3>
            <div id="searchSummary"></div>
            <div class="table-responsive">
                <table id="searchTable">
                    <thead>
                    <tr>
                        <th>Trip ID</th>
                        <th>Driver</th>
                        <th>Route</th>
                        <th>Status</th>
                        <th>Routes/Polylines</th>
                        <th>Created</th>
                    </tr>
                    </thead>
                    <tbody id="searchTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Validate Tab -->
    <div id="validate-tab" class="tab-content">
        <div class="form-section">
            <h3>‚úÖ Validate Polyline Data</h3>
            <div class="form-grid">
                <div class="form-group">
                    <label for="validateTripId">Single Trip ID</label>
                    <input type="text" id="validateTripId" placeholder="Enter trip ID to validate">
                </div>
            </div>
            <button class="btn btn-primary" onclick="validateSingleTrip()">‚úÖ Validate Trip</button>

            <hr style="margin: 30px 0;">

            <div class="form-group">
                <label for="validateTripIds">Bulk Validate (Enter Trip IDs, one per line)</label>
                <textarea id="validateTripIds" rows="6" placeholder="trip_123&#10;trip_456&#10;trip_789" style="width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-family: monospace;"></textarea>
            </div>
            <button class="btn btn-primary" onclick="validateBulkTrips()">‚úÖ Bulk Validate</button>
        </div>

        <div class="results-section" id="validateResults" style="display: none;">
            <h3>‚úÖ Validation Results</h3>
            <div id="validationSummary"></div>
            <div class="table-responsive">
                <table id="validateTable">
                    <thead>
                    <tr>
                        <th>Trip ID</th>
                        <th>Routes Summary</th>
                        <th>Overall Status</th>
                        <th>Issues</th>
                        <th>Route Details</th>
                    </tr>
                    </thead>
                    <tbody id="validateTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Missing Polylines Tab -->
    <div id="missing-tab" class="tab-content">
        <div class="form-section">
            <h3>‚ùå Trips Missing Polylines</h3>
            <div class="form-grid">
                <div class="form-group">
                    <label for="missingTimeRange">Time Range</label>
                    <select id="missingTimeRange">
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="last7d" selected>Last 7 Days</option>
                        <option value="last30d">Last 30 Days</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="missingTripStatus">Trip Status</label>
                    <select id="missingTripStatus">
                        <option value="">All Statuses</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="ongoing">Ongoing</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="missingLimit">Limit</label>
                    <input type="number" id="missingLimit" value="100" min="1" max="1000">
                </div>
            </div>
            <button class="btn btn-primary" onclick="loadMissingPolylines()">‚ùå Find Missing Polylines</button>
            <button class="btn btn-danger" onclick="generateMissingReport()">üìã Generate Report</button>
        </div>

        <div class="results-section" id="missingResults" style="display: none;">
            <h3>‚ùå Trips Missing Polylines</h3>
            <div id="missingSummary"></div>
            <div class="table-responsive">
                <table id="missingTable">
                    <thead>
                    <tr>
                        <th>Trip ID</th>
                        <th>Driver</th>
                        <th>Route</th>
                        <th>Status</th>
                        <th>Route Summary</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody id="missingTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variables
    let coverageChart = null;

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
        loadQuickStatus();

        // Setup time range change handlers
        document.getElementById('statsTimeRange').addEventListener('change', handleStatsTimeRangeChange);
    });

    function switchTab(tabName) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });

        // Remove active class from all tabs
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });

        // Show selected tab content
        document.getElementById(tabName + '-tab').classList.add('active');

        // Add active class to clicked tab
        event.target.classList.add('active');
    }

    function handleStatsTimeRangeChange() {
        const timeRange = document.getElementById('statsTimeRange').value;
        const customRange = document.getElementById('customStatsRange');
        const customEndRange = document.getElementById('customStatsEndRange');

        if (timeRange === 'custom') {
            customRange.style.display = 'block';
            customEndRange.style.display = 'block';
        } else {
            customRange.style.display = 'none';
            customEndRange.style.display = 'none';
        }
    }

    async function loadQuickStatus() {
        try {
            const response = await fetch('/api/trips/polyline/quick-check');
            const data = await response.json();

            document.getElementById('coverageValue').textContent = data.coveragePercentage + '%';
            document.getElementById('totalTripsValue').textContent = data.totalTrips.toLocaleString();
            document.getElementById('withPolylineValue').textContent = data.tripsWithPolyline.toLocaleString();
            document.getElementById('withoutPolylineValue').textContent = data.tripsWithoutPolyline.toLocaleString();

            // Update coverage card color
            const coverageCard = document.getElementById('coverageCard');
            coverageCard.className = 'card metric-card ' + data.status;

        } catch (error) {
            console.error('Error loading quick status:', error);
            showError('Failed to load quick status data');
        }
    }

    async function loadStatistics() {
        const timeRange = document.getElementById('statsTimeRange').value;
        const customStart = document.getElementById('statsCustomStart').value;
        const customEnd = document.getElementById('statsCustomEnd').value;

        const params = new URLSearchParams({ timeRange });
        if (timeRange === 'custom') {
            if (customStart) params.append('customStart', customStart);
            if (customEnd) params.append('customEnd', customEnd);
        }

        showLoading('statisticsResults');

        try {
            const response = await fetch(`/api/trips/polyline/statistics?${params}`);
            const data = await response.json();

            displayStatistics(data);

        } catch (error) {
            console.error('Error loading statistics:', error);
            showError('Failed to load statistics');
        }
    }

    function displayStatistics(data) {
        const resultsSection = document.getElementById('statisticsResults');
        const detailedStats = document.getElementById('detailedStats');

        // Create detailed statistics cards
        detailedStats.innerHTML = `
                <div class="card">
                    <h4>üìä Overall Coverage</h4>
                    <p><strong>Coverage:</strong> ${data.statistics.overview.coveragePercentage}%</p>
                    <p><strong>Total Trips:</strong> ${data.statistics.overview.totalTrips.toLocaleString()}</p>
                    <p><strong>With Polylines:</strong> ${data.statistics.overview.tripsWithPolyline.toLocaleString()}</p>
                    <p><strong>Without Polylines:</strong> ${data.statistics.overview.tripsWithoutPolyline.toLocaleString()}</p>
                </div>
                <div class="card">
                    <h4>üìà By Status</h4>
                    ${Object.entries(data.statistics.coverageByStatus).map(([status, stats]) =>
            `<p><strong>${status}:</strong> ${stats.coveragePercentage}% (${stats.withPolyline}/${stats.total})</p>`
        ).join('')}
                </div>
                <div class="card">
                    <h4>üöó By Ride Type</h4>
                    ${Object.entries(data.statistics.coverageByRideType).map(([type, stats]) =>
            `<p><strong>${type}:</strong> ${stats.coveragePercentage}% (${stats.withPolyline}/${stats.total})</p>`
        ).join('')}
                </div>
            `;

        // Create coverage chart
        createCoverageChart(data.statistics.dailyCoverage);

        resultsSection.style.display = 'block';
    }

    function createCoverageChart(dailyData) {
        const ctx = document.getElementById('coverageChart').getContext('2d');

        if (coverageChart) {
            coverageChart.destroy();
        }

        coverageChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: dailyData.map(d => d.date),
                datasets: [{
                    label: 'Coverage Percentage',
                    data: dailyData.map(d => d.coveragePercentage),
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    tension: 0.4,
                    fill: true
                }, {
                    label: 'Trips with Polyline',
                    data: dailyData.map(d => d.withPolyline),
                    borderColor: '#27ae60',
                    backgroundColor: 'rgba(39, 174, 96, 0.1)',
                    tension: 0.4,
                    yAxisID: 'y1'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        title: {
                            display: true,
                            text: 'Coverage %'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Trip Count'
                        },
                        grid: {
                            drawOnChartArea: false
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Daily Polyline Coverage Trends'
                    }
                }
            }
        });
    }

    async function searchTrips() {
        const polylineRequired = document.getElementById('polylineFilter').value;
        const timeRange = document.getElementById('searchTimeRange').value;
        const tripStatus = document.getElementById('tripStatus').value;
        const rideType = document.getElementById('rideType').value;
        const recordLimit = document.getElementById('recordLimit').value;
        const validatePolyline = document.getElementById('validatePolyline').value;

        const searchData = {
            polylineRequired: polylineRequired === 'null' ? null : polylineRequired === 'true',
            timeRange,
            tripStatus: tripStatus || undefined,
            rideType: rideType || undefined,
            recordLimit: parseInt(recordLimit),
            validatePolyline: validatePolyline === 'true',
            includePolylineMetrics: true
        };

        showLoading('searchResults');

        try {
            const response = await fetch('/api/trips/search/with-polyline', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(searchData)
            });

            const data = await response.json();
            displaySearchResults(data);

        } catch (error) {
            console.error('Error searching trips:', error);
            showError('Failed to search trips');
        }
    }

    function displaySearchResults(data) {
        const resultsSection = document.getElementById('searchResults');
        const summaryDiv = document.getElementById('searchSummary');
        const tableBody = document.getElementById('searchTableBody');

        // Display summary
        summaryDiv.innerHTML = `
                <div class="dashboard-grid">
                    <div class="card">
                        <h4>üìä Search Summary</h4>
                        <p><strong>Total Found:</strong> ${data.totalTrips.toLocaleString()}</p>
                        <p><strong>Returned:</strong> ${data.tripsReturned.toLocaleString()}</p>
                        <p><strong>Filter:</strong> ${data.searchOptions.polylineRequired === null ? 'All trips' :
            data.searchOptions.polylineRequired ? 'With polylines' : 'Without polylines'}</p>
                    </div>
                    ${data.polylineMetrics ? `
                    <div class="card">
                        <h4>üó∫Ô∏è Polyline Metrics</h4>
                        <p><strong>Avg Routes/Trip:</strong> ${data.polylineMetrics.averageRoutesPerTrip.toFixed(1)}</p>
                        <p><strong>Multi-Route Trips:</strong> ${data.polylineMetrics.totalTripsWithMultipleRoutes}</p>
                        <p><strong>Total Valid Routes:</strong> ${data.polylineMetrics.totalValidPolylines}</p>
                        <p><strong>Avg Polyline Length:</strong> ${Math.round(data.polylineMetrics.averagePolylineLength)}</p>
                    </div>
                    ` : ''}
                </div>
            `;

        // Display trips table
        tableBody.innerHTML = data.trips.map(trip => {
            const routeSummary = getRouteSummaryFromTrip(trip);
            return `
                <tr>
                    <td>${trip.tripId}</td>
                    <td>${trip.driver.name || 'N/A'}</td>
                    <td>${trip.from.name || 'N/A'} ‚Üí ${trip.to.name || 'N/A'}</td>
                    <td><span class="status-badge status-${trip.tripStatus}">${trip.tripStatus}</span></td>
                    <td>${routeSummary}</td>
                    <td>${trip.createdAt ? new Date(trip.createdAt._seconds * 1000).toLocaleString() : 'N/A'}</td>
                </tr>
            `;
        }).join('');

        resultsSection.style.display = 'block';
    }

    function getRouteSummaryFromTrip(trip) {
        if (trip.polylineMetrics) {
            const metrics = trip.polylineMetrics;
            let statusClass = 'status-missing';
            let statusText = 'No Routes';

            if (metrics.routesWithPolylines > 0) {
                if (metrics.routesWithPolylines === metrics.totalRoutes) {
                    statusClass = 'status-valid';
                    statusText = 'All Routes';
                } else {
                    statusClass = 'status-partial';
                    statusText = 'Partial';
                }
            }

            return `
                <div>
                    <span class="status-badge ${statusClass}">${statusText}</span>
                    <div class="route-summary">
                        <span class="route-tag">${metrics.totalRoutes} total</span>
                        <span class="route-tag">${metrics.routesWithPolylines} with polylines</span>
                        ${metrics.hasMultipleRoutes ? '<span class="route-tag">Multi-route</span>' : ''}
                    </div>
                </div>
            `;
        } else if (trip.distanceMatrices && Array.isArray(trip.distanceMatrices)) {
            const withPolylines = trip.distanceMatrices.filter(route => route.polyline && route.polyline.length > 0).length;
            const total = trip.distanceMatrices.length;
            let statusClass = withPolylines > 0 ? (withPolylines === total ? 'status-valid' : 'status-partial') : 'status-missing';

            return `
                <span class="status-badge ${statusClass}">${withPolylines}/${total} routes</span>
            `;
        } else {
            return '<span class="status-badge status-missing">‚úó No Routes</span>';
        }
    }

    async function validateSingleTrip() {
        const tripId = document.getElementById('validateTripId').value.trim();
        if (!tripId) {
            showError('Please enter a trip ID');
            return;
        }

        showLoading('validateResults');

        try {
            const response = await fetch(`/api/trips/${tripId}/polyline/validate`);
            const data = await response.json();

            displayValidationResults([data.validation], true);

        } catch (error) {
            console.error('Error validating trip:', error);
            showError('Failed to validate trip');
        }
    }

    async function validateBulkTrips() {
        const tripIdsText = document.getElementById('validateTripIds').value.trim();
        if (!tripIdsText) {
            showError('Please enter trip IDs');
            return;
        }

        const tripIds = tripIdsText.split('\n').map(id => id.trim()).filter(id => id);
        if (tripIds.length === 0) {
            showError('Please enter valid trip IDs');
            return;
        }

        showLoading('validateResults');

        try {
            const response = await fetch('/api/trips/polyline/validate-bulk', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ tripIds })
            });

            const data = await response.json();
            displayValidationResults(data.bulkValidation.validations, false, data.bulkValidation.summary);

        } catch (error) {
            console.error('Error bulk validating trips:', error);
            showError('Failed to validate trips');
        }
    }

    function displayValidationResults(validations, isSingle, summary = null) {
        const resultsSection = document.getElementById('validateResults');
        const summaryDiv = document.getElementById('validationSummary');
        const tableBody = document.getElementById('validateTableBody');

        // Display summary for bulk validation
        if (summary) {
            summaryDiv.innerHTML = `
                    <div class="dashboard-grid">
                        <div class="card">
                            <h4>üìä Validation Summary</h4>
                            <p><strong>Total Checked:</strong> ${summary.totalChecked}</p>
                            <p><strong>With Polylines:</strong> ${summary.withPolylines}</p>
                            <p><strong>Valid:</strong> ${summary.valid}</p>
                            <p><strong>Invalid:</strong> ${summary.invalid}</p>
                            <p><strong>Missing:</strong> ${summary.missing}</p>
                        </div>
                        <div class="card">
                            <h4>üó∫Ô∏è Route Summary</h4>
                            <p><strong>Total Routes:</strong> ${summary.totalRoutes}</p>
                            <p><strong>Routes with Polylines:</strong> ${summary.routesWithPolylines}</p>
                            <p><strong>Avg Routes/Trip:</strong> ${summary.averageRoutesPerTrip.toFixed(1)}</p>
                        </div>
                    </div>
                `;
        } else {
            summaryDiv.innerHTML = '';
        }

        // Display validation table
        tableBody.innerHTML = validations.map(validation => {
            const routeDetails = createRouteDetailsHTML(validation);
            const routeSummary = createRouteSummaryHTML(validation);

            return `
                <tr>
                    <td>${validation.tripId}</td>
                    <td>${routeSummary}</td>
                    <td><span class="status-badge ${validation.isValid ? 'status-valid' : (validation.hasPolylines ? 'status-invalid' : 'status-missing')}">
                        ${validation.isValid ? '‚úì Valid' : (validation.hasPolylines ? '‚úó Invalid' : '‚úó Missing')}
                    </span></td>
                    <td>${validation.issues ? validation.issues.join(', ') : 'None'}</td>
                    <td>${routeDetails}</td>
                </tr>
            `;
        }).join('');

        resultsSection.style.display = 'block';
    }

    function createRouteSummaryHTML(validation) {
        if (validation.summary) {
            return `
                <div class="route-summary">
                    <span class="route-tag">${validation.summary.totalRoutes} routes</span>
                    <span class="route-tag">${validation.summary.routesWithPolylines} with polylines</span>
                    <span class="route-tag">${validation.summary.validRoutes} valid</span>
                    <div style="margin-top: 5px;">
                        <small>Coverage: ${validation.summary.overallCoverage}% | Valid: ${validation.summary.validCoverage}%</small>
                    </div>
                </div>
            `;
        }
        return 'N/A';
    }

    function createRouteDetailsHTML(validation) {
        if (!validation.routes || validation.routes.length === 0) {
            return '<em>No route details</em>';
        }

        return `
            <div class="validation-details">
                ${validation.routes.map(route => `
                    <div class="validation-route ${route.isValid ? 'valid' : (route.hasPolyline ? 'invalid' : 'missing')}">
                        <strong>${route.routeLabel}</strong>
                        ${route.hasPolyline ?
            `<div class="polyline-info">Length: ${route.details.length}, Points: ~${route.details.estimatedPoints}</div>
                             ${route.details.duration ? `<div>Duration: ${route.details.duration}, Distance: ${route.details.distance}</div>` : ''}` :
            '<div><em>No polyline</em></div>'
        }
                        ${route.issues.length > 0 ? `<div style="color: #dc3545; font-size: 0.8rem;">${route.issues.join(', ')}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        `;
    }

    async function loadMissingPolylines() {
        const timeRange = document.getElementById('missingTimeRange').value;
        const tripStatus = document.getElementById('missingTripStatus').value;
        const size = document.getElementById('missingLimit').value;

        const params = new URLSearchParams({
            timeRange,
            size: parseInt(size)
        });

        if (tripStatus) params.append('tripStatus', tripStatus);

        showLoading('missingResults');

        try {
            const response = await fetch(`/api/trips/missing-polylines?${params}`);
            const data = await response.json();

            displayMissingResults(data);

        } catch (error) {
            console.error('Error loading missing polylines:', error);
            showError('Failed to load missing polylines');
        }
    }

    function displayMissingResults(data) {
        const resultsSection = document.getElementById('missingResults');
        const summaryDiv = document.getElementById('missingSummary');
        const tableBody = document.getElementById('missingTableBody');

        // Display summary
        summaryDiv.innerHTML = `
                <div class="card">
                    <h4>‚ùå Missing Polylines Summary</h4>
                    <p><strong>Total Found:</strong> ${data.summary.totalTripsWithoutPolyline.toLocaleString()}</p>
                    <p><strong>Displayed:</strong> ${data.summary.tripsReturned.toLocaleString()}</p>
                    <p><strong>Time Range:</strong> ${data.summary.timeRange}</p>
                    <p><strong>Period:</strong> ${new Date(data.summary.filters.startTime).toLocaleDateString()} - ${new Date(data.summary.filters.endTime).toLocaleDateString()}</p>
                </div>
            `;

        // Display missing trips table
        tableBody.innerHTML = data.trips.map(trip => {
            const routeSummary = getRouteSummaryFromTrip(trip);
            return `
                <tr>
                    <td>${trip.tripId}</td>
                    <td>${trip.driver.name || 'N/A'}</td>
                    <td>${trip.from.name || 'N/A'} ‚Üí ${trip.to.name || 'N/A'}</td>
                    <td><span class="status-badge status-${trip.tripStatus}">${trip.tripStatus}</span></td>
                    <td>${routeSummary}</td>
                    <td>${trip.createdAt ? new Date(trip.createdAt._seconds * 1000).toLocaleString() : 'N/A'}</td>
                    <td>
                        <button class="btn btn-primary" style="padding: 5px 10px; font-size: 0.8rem;"
                                onclick="validateSingleTripFromTable('${trip.tripId}')">
                            Validate
                        </button>
                    </td>
                </tr>
            `;
        }).join('');

        resultsSection.style.display = 'block';
    }

    async function validateSingleTripFromTable(tripId) {
        document.getElementById('validateTripId').value = tripId;
        switchTab('validate');
        await validateSingleTrip();
    }

    async function generateMissingReport() {
        const timeRange = document.getElementById('missingTimeRange').value;

        try {
            window.open(`/api/trips/polyline/coverage-report?timeRange=${timeRange}&format=csv&includeDetails=true`, '_blank');
            showSuccess('Report download started');
        } catch (error) {
            console.error('Error generating report:', error);
            showError('Failed to generate report');
        }
    }

    function exportResults() {
        showSuccess('Export functionality will be implemented based on your specific requirements');
    }

    function showLoading(elementId) {
        const element = document.getElementById(elementId);
        element.innerHTML = '<div class="loading">Loading...</div>';
        element.style.display = 'block';
    }

    function showError(message) {
        let errorDiv = document.querySelector('.error-message');
        if (!errorDiv) {
            errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            document.querySelector('.container').prepend(errorDiv);
        }
        errorDiv.textContent = message;

        setTimeout(() => {
            if (errorDiv) errorDiv.remove();
        }, 5000);
    }

    function showSuccess(message) {
        let successDiv = document.querySelector('.success-message');
        if (!successDiv) {
            successDiv = document.createElement('div');
            successDiv.className = 'success-message';
            document.querySelector('.container').prepend(successDiv);
        }
        successDiv.textContent = message;

        setTimeout(() => {
            if (successDiv) successDiv.remove();
        }, 3000);
    }
</script>
</body>
</html>